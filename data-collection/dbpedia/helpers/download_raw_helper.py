"""
helper function for dbpedia/download-raw.py
"""

import requests
from bs4 import BeautifulSoup

def get_data(main_url, areas_url):
    """
        returns dictionary generated by parse_page function
        along with additional pages (parsed)
            - all pages found in "dbo:type" key of areas_url page

        eg. {
            "name": "Singapore",
            "normal singapore key", "normal singapore value",

            ...

            "areas": {
                "City Hall": <City Hall object from parse_page function>,
                "Yishun": <Yishun object from parse_page function>,
                "Aljunied": <Aljunied object from parse_page function>,
                "Serangoon": <Serangoon object from parse_page function>
            }
        }

    """
    print("Parsing main page")
    main = parse_page(main_url)
    main["areas"] = {}
    
    areas = parse_page(areas_url)
    for area in areas["dbo:type"]:
        try:
            print("Parsing area:", area["name"])
            main["areas"][area["name"]] = parse_page(area["href"])
        except: 
            print("ERROR parsing", area["name"])

    return main

def parse_page(url):
    """
        scrapes dbpedia page given in url
        returns dictionary representing dbpedia article object
    """
    r = requests.get(url)
    soup = BeautifulSoup(r.content, "html.parser")

    table = soup.find("table", {"class": "description"})
    out = {}

    for tr in table.find_all("tr"):
        tds = tr.find_all("td")
        if len(tds) == 2:
            k,v = tds
            k = k.find("a").text.strip()

            value = []
            for li in v.find("ul").find_all("li"):
    
                item = None
                try:
                    a = li.find("a")
                    item = {
                        "href": a["href"],
                        "name": a.text.strip()
                    }
                except:
                    item = li.text.strip()

                value.append(item)

            value = value[0] if len(value)==1 else value

            out[k] = value
        
    return out