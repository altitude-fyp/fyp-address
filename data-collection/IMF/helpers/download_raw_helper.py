"""
helper function for imf/download-raw.py
"""

import requests
import time
import pandas as pd 
import sys

def get_data(country):
    """
        returns dictionary generated by getCompactData function for specified Dataflows.

        dataflow_ids = ['APDREO', 'BOP', 'BOPAGG', 'DOT', 'CPI', 'FAS', 'FDI', 'FSI']

        eg. {'APDREO': [{'@FREQ': 'A',
                        '@REF_AREA': 'SG',
                        '@INDICATOR': 'PCPI_PCH',
                        '@UNIT_MULT': '0',
                        '@TIME_FORMAT': 'P1Y',
                        'Obs': [{'@TIME_PERIOD': '1990', '@OBS_VALUE': '3.44997677939868'},
                            {'@TIME_PERIOD': '1991', '@OBS_VALUE': '3.43984880019019'},
                            {'@TIME_PERIOD': '1992', '@OBS_VALUE': '2.24393626173275'},
                            {'@TIME_PERIOD': '1993', '@OBS_VALUE': '2.29151335073073'},
                            {'@TIME_PERIOD': '1994', '@OBS_VALUE': '3.09465669285339'},
                            ....
                            }]
        }

    """
    print("Searching Singapore...")
    
    # To query all Dataflows
    # url = 'http://dataservices.imf.org/REST/SDMX_JSON.svc/'
    # key = 'Dataflow'

    # data = requests.get(f'{url}{key}').json()

    # dataflows = data['Structure']['Dataflows']['Dataflow'] #Gather dataflows
    
    # identified dataflows for analytics
    dataflow_ids = ['APDREO', 'BOP', 'BOPAGG', 'CPI', 'FAS', 'FDI', 'FSI']
    
    all_data = {}

    for dataflow_id in dataflow_ids:

        columns = ['Geographical Areas', 'Indicator']
#         dataflow_name = dataflow['Name']['#text'] # Name of dataflow
#         dataflow_id = dataflow['@id'].replace('DS-','')

        url = 'http://dataservices.imf.org/REST/SDMX_JSON.svc/'
        key = 'DataStructure/' + dataflow_id

        try:
            codelists_data = requests.get(f'{url}{key}').json()['Structure']['CodeLists']['CodeList']
            
            all_codelists = {'dataflow_id': dataflow_id}
        
            country_details = {}

            for codelist in codelists_data:
                category = codelist['Name']['#text']

                if category in columns:

                    all_codelists[category] = []
                    codes = codelist['Code']

                    if type(codes) is dict:
                        
                        if category == 'Indicator':
                            all_codelists[category].append(codes)
                        else:
                            all_codelists[category].append(codes)
                    else:
                        
                        for code in codes:

                            if code['Description'] == {'@xml:lang': 'en', '#text': country}:
                                country_details = code

                            if category == 'Indicator':
                                all_codelists[category].append(code)
                            else:
                                all_codelists[category].append(code)

            if 'Geographical Areas' in all_codelists and country_details in all_codelists['Geographical Areas']:
                print('Running ' + dataflow_id + '...')
                all_data[dataflow_id] = all_codelists    
        except:
            pass
#             print(dataflow_name + ' failed.')

    df = pd.DataFrame(all_data)
    df = df.transpose()
    df = df.reset_index()
#     to mongoDB
#     df.to_csv('IMFdata_codelists_dimensions.csv')

#     get dataflow_id
    dataflow_ids = df['dataflow_id']
    countries_ids = df['Geographical Areas']

    all_country = {}

    for index in range(len(dataflow_ids)):
        
        dataflow_id = dataflow_ids[index]
        countries = countries_ids[index]
        try:
#             Gather country code
            country_code = ''
            for countryc in countries:
                if countryc['Description'] == {'@xml:lang': 'en', '#text': country}:
                    country_code = countryc['@value']
            url = 'http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/'
            key = dataflow_id +'/A.'+ country_code +'.'
            data = (requests.get(f'{url}{key}').json()['CompactData']['DataSet']['Series'])

            all_country[dataflow_id] = data
        except:
            pass
        
    return all_country